Whole sale plagarism of Bruce's [[https://github.com/otfrom/otfrom-org-emacs][emacs config]]

* Helpers

  There are a number of helper functions that we'll need through the
  rest of this. We'll just define them up here.

** load-if-exists

   This is just a nice function to load a file if it exists, but just
   print a message rather than an error if it doesn't. This is handy
   for things like loading specific local config that you don't want
   to go into github or be shared such as erc nicks, passwords, blog
   rolls, etc.

   #+BEGIN_SRC emacs-lisp
     (defun load-if-exists (file)
       (if (file-exists-p file)
           (progn
             (load file)
             (message (format "Loading file: %s" file)))
         (message (format "No %s file. So not loading one." file))))   
   #+END_SRC
   
* Globals

** Hippie Expand

   I have a soft spot for hippie-expand. There might be better ways to
   do this though and I'm happy to take advice from anyone with a
   strong opinion. :-D

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-RET") 'hippie-expand)
   #+END_SRC

** upcase and downcase region

   I like to be able to do this. I get lots of things that come in
   SHOUTING or that need to SHOUT.

   #+BEGIN_SRC emacs-lisp
     (put 'downcase-region 'disabled nil)
     (put 'upcase-region 'disabled nil)
   #+END_SRC

** diminish

   As we add lots of useful minor-modes the mode line can get a bit
   unwieldy. diminish-mode helps us with that. We'll set it up here
   and use it in various places throughout the setup.

   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'diminish)
   #+END_SRC
   
** uniquify

   #+BEGIN_SRC emacs-lisp
     (require 'uniquify)
     (setq uniquify-buffer-name-style 'post-forward)   
   #+END_SRC
 
** which-func

   It is ever so handy to know which function you are in, though I
   hope that in the code that I write that my functions are short
   enough that I don't really need to look on the mode-line to see
   which function I am in. In other words, I hope I only need this
   for others' code.
   
   #+BEGIN_SRC emacs-lisp
     (require 'which-func)
     (which-func-mode 1)
   #+END_SRC

** iedit

   This lets us change things that are the same at the same
   time. This is useful for renaming variables and functions.

   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'iedit)
   #+END_SRC
   
** Make emacs Discoverable

   I started following [[https://twitter.com/melpa_emacs][@melpa_emacs]] at the end of 2013. From that I
   discovered (see what I did there) discover.el, which has an
   explanatory blog post [[http://www.masteringemacs.org/articles/2013/12/21/discoverel-discover-emacs-context-menus/][here]].
   
   
   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'discover)
     (global-discover-mode 1)
   #+END_SRC
   
* non-elpa and work arounds

  At the moment we don't have any workarounds. It looked like we might
  need one for cider for a while but the marvelously helpful grand
  master of the [[https://github.com/clojure-emacs][clojure Emacs repo]] [[http://twitter.com/bbatsov][Bozhidar Batsov]] has fixed it.

** non-elpa files

   Unfortunately, we can't get everything we want from the package
   archives or we might have files that we're working on locally that
   we haven't released yet. We keep those in a non-elpa directory. We
   need to add this to the load-path so that we can require the files
   we have here.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path (concat user-emacs-directory "non-elpa/"))
   #+END_SRC
   
* Make it Pretty

** color themes

*** custom-theme-directory

    Themes seem to be quite picky about where they live. They require
    custom-theme-directory to be set. By default this is the same as
    user-emacs-directory, which is usually ~/.emacs.d. I'd like to
    keep them separate if possible. I learned this one by reading
    some of [[https://github.com/sw1nn/dotfiles][Neale Swinnerton's dotfiles]].

    #+BEGIN_SRC emacs-lisp
      (setq custom-theme-directory (concat user-emacs-directory "themes"))
    #+END_SRC

*** grandshell

    I've been finding lots of interesting things from [[https://twitter.com/steckerhalter][steckerhalter]]
    and this [[https://github.com/steckerhalter/grandshell-theme][grandshell]] theme looks pretty good. I'm going to try it
    for a while.
    
    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'grandshell-theme)
    #+END_SRC

*** cyberpunk, I still love you
    
    I really like the cyberpunk theme from [[https://github.com/overtone/emacs-live][emacs-live]] and [[https://twitter.com/samaaron][Sam Aaron]] is
    a lovely guy. I wanted to avoid needing the old color-theme
    mode. [[https://twitter.com/rikardglans][Rikard Glans]] was nice enought to port it over to the new
    stuff.

    I'm not using it at the moment as I'm trying out other themes.

    #+BEGIN_SRC emacs-lisp
       ;;(load-theme 'emacslive-cyberpunk t)
    #+END_SRC

** fonts

   Ah, the joys of playing with different monospaced fonts on
   emacs. Menlo seems to be the one I'm happiest with on my MBA.

   #+BEGIN_SRC emacs-lisp
     (when (memq window-system '(mac ns))
       (set-default-font "-apple-Menlo-medium-normal-normal-*-12-*-*-*-m-0-iso10646-1"))
   #+END_SRC
   
** bars, menus and numbers

   I like no scroll bars, no toolbars and line and column numbers in
   the mode-line. I like having the menus, unless I"m in a terminal as
   I sometimes discover keybindings or functions I wasn't aware of
   before.

   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
     (line-number-mode 1)
     (column-number-mode 1)
     (global-linum-mode 1)
   #+END_SRC

** Startup Screen

   I'd also like to ski the startup screen and go straight to
   the *scratch* buffer.

   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-screen t)
   #+END_SRC

** alpha alpha alpha

   I don't use this all the time, but sometimes, when I'm hacking
   only on my diddy 13" laptop I like to have a window tailing a file
   in the background while I'm writing something in the
   foreground. This let's us toggle transparency. Who wouldn't like
   that? I'm pretty sure I got this from [[https://twitter.com/IORayne][Anthony Grimes]]. 
   
   #+BEGIN_SRC emacs-lisp
     (defun toggle-transparency ()
       (interactive)
       (let ((param (cadr (frame-parameter nil 'alpha))))
         (if (and param (/= param 100))
             (set-frame-parameter nil 'alpha '(100 100))
           (set-frame-parameter nil 'alpha '(85 50)))))
     (global-set-key (kbd "C-c t") 'toggle-transparency)
   #+END_SRC

** nyan-mode

   It is good enough for @bodil and @AnnaPawlicka says she'll use it
   if I install it. So here we go. [[http://www.nyancat.com/][Nyan Cat]] for me.

   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'nyan-mode)
   #+END_SRC

   And we want to show it and have it be animated.

   #+BEGIN_SRC emacs-lisp
     (nyan-mode)
     (nyan-start-animation)
   #+END_SRC
* directories, navigation, searching, movement
** dired

   dired can do lots of things. I'm pretty basic in my use. I do like
   to have the file listings use human friendly numbers though.

   #+BEGIN_SRC emacs-lisp
     (setq dired-listing-switches "-alh")
   #+END_SRC

** helm-mode

   helm-mode is the succesor to anything.el. I don't really have my
   head around it all yet, but I'm already pretty impressed with it so
   I'll include it here and add more to it as I understand what is
   going on.

   My helm-mode guru is [[http://twitter.com/krisajenkins][Kris Jenkins]].
   
   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'helm)
     (helm-mode 1)
   #+END_SRC

   We can diminish how much room helm-mode takes up on the command
   line.

   #+BEGIN_SRC emacs-lisp
     (diminish 'helm-mode)
   #+END_SRC

*** command-t searching

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'helm-ls-git)
      
      (defun helm-all ()
        (interactive)
        (helm :sources '(helm-source-findutils
                         ;;helm-source-recentf
                         helm-source-ls-git
                         helm-source-bookmarks
                         helm-source-buffers-list
                         ;;helm-source-google-suggest
                         ;;helm-source-locate
                         )
              :buffer "*helm all the things*"))
      
      (global-set-key (kbd "s-t") 'helm-all)
      
    #+END_SRC
** git

*** magit

    magit is a *fantastic* mode for dealing with git.
    
    #+BEGIN_SRC emacs-lisp
       (maybe-install-and-require 'magit)
    #+END_SRC
    
    I use magit-status a lot. So let's bind it to C-x g.

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-x g") 'magit-status)
    #+END_SRC

*** git-gutter-mode+

    It is really nice having +/= in the gutter. I like it more than
    having line numbers and thus I've dumped linum-mode.
    
    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'git-gutter-fringe+)
      (global-git-gutter+-mode t)
    #+END_SRC

    It is also quite nice to be able to navigate a file by he git
    hunks. It makes it a bit easier to see what has changed since the
    last time in the context of the whole file.

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "s-n") 'git-gutter+-next-hunk)
      (global-set-key (kbd "s-p") 'git-gutter+-previous-hunk)
    #+END_SRC

    We can diminish the size of GitGutter in the mode-line

    #+BEGIN_SRC emacs-lisp
      (diminish 'git-gutter+-mode)
    #+END_SRC
    
** ace-jump-mode

   Move quickly anywhere in the buffer in 3 keystrokes. We can move
   there with C-c j and back to where we started with C-c k.
   
   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'ace-jump-mode)
     (global-set-key (kbd "C-c j") 'ace-jump-mode)
     (global-set-key (kbd "C-c k") 'ace-jump-mode-pop-mark)
   #+END_SRC

** window movement

   I need to remap the windmove keys so that they don't conflict with
   the org-mode or paredit keys.

   #+BEGIN_SRC emacs-lisp
     (global-set-key [M-s-up] 'windmove-up)
     (global-set-key [M-s-down] 'windmove-down)
     (global-set-key [M-s-right] 'windmove-right)
     (global-set-key [M-s-left] 'windmove-left)
   #+END_SRC
   
** backup directories

   I'm fed up of having to put *~ into my .gitignore everywhere and
   I shouldn't really leave emacs only things in there anyway. Let's
   just move all the backup files to one directory.

   #+BEGIN_SRC emacs-lisp
     (setq
      backup-by-copying t      ; don't clobber symlinks
      backup-directory-alist
      '(("." . "~/.saves"))    ; don't litter my fs tree
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)       ; use versioned backups
   #+END_SRC

** ibuffer

   I've never used ibuffer much before, but many people swear by it
   (rather than at it). I've tried it now and it looks good. So let's
   rebind C-x C-b.

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x C-b") 'ibuffer)
   #+END_SRC
   
** get trampy

I love tramp for all my remote debugging
    #+BEGIN_SRC emacs-lisp
      (require 'tramp)
      (setq tramp-default-method "ssh")
       #+END_SRC
* Communication Modes

** twittering-mode

   I have been accused by many ([[http://twitter.com/rrees][Robert Rees]] and [[http://twitter.com/cluttercup][Jane Dickson]] to name
   but two) of being constantly on twitter. This is mostly fair. I'm
   curious to see the revision history of this file and see if I
   change this description before I declare .emacs bankruptcy again.

   The best twitter client I've found is twittering-mode. 

   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'twittering-mode)    
   #+END_SRC

   I *don't* want to see the the status messages in the mini-buffer
   when twitter fetches things.
   
   #+BEGIN_SRC emacs-lisp
     (setq twittering-url-show-status nil)
   #+END_SRC

   I like to have the icon pictures.
      
   #+BEGIN_SRC emacs-lisp
     (setq twittering-icon-mode 1)
     (setq twittering-use-icon-storage t)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (add-hook 'twittering-edit-mode-hook
         (lambda () (ispell-minor-mode) (flyspell-mode)))
   #+END_SRC

   You can configure it to use a local, encrypted file for the
   credentials as well, which makes re-connecting easier and
   reasonably secure.

   This didn't really work until I fixed the exec-path to get gpg in
   it, which is in /usr/local/bin on my machine, so you need to add
   the bits from [[$PATH is broken][$PATH is broken]] in the [[Macintosh Specific Setup][Macintosh Specific Setup]].

   #+BEGIN_SRC emacs-lisp
     (setq twittering-use-master-password t)
   #+END_SRC

   By default I want to get my replies and direct messages.

   #+BEGIN_SRC emacs-lisp
     (setq twittering-initial-timeline-spec-string
           '(":replies"
             ":direct_messages"))   
   #+END_SRC

*** Tweet Button

    Sometimes I just want to scream. Twitter lets me do that.

    #+BEGIN_SRC emacs-lisp
      (global-set-key [M-f6] 'twittering-update-status-interactive)
    #+END_SRC
    
** jabber.el for gtalk and other jabber servers

   It looks like there will be a time in the near future when Google
   will no longer support jabber/xmpp. There might be a new mode to
   support hangouts when that happens or I might have to go over to
   running my own xmpp server or find someone else who is doing one,
   or just abandon jabber for irc. Until that time I'll have a go with
   jabber.el.

   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'jabber)
   #+END_SRC

   The setup for the jabber-account-list is in my private gpg
   encrypted mellon.el file.

   We also want to be able to store a local history of our chats.
   
   #+BEGIN_SRC emacs-lisp
     (setq
       jabber-history-enabled t
       jabber-use-global-history nil
       jabber-backlog-number 40
       jabber-backlog-days 30)
   #+END_SRC

   And we want URLs to be clickable.
   
   #+BEGIN_SRC emacs-lisp
     (add-hook 'jabber-chat-mode-hook 'goto-address)
   #+END_SRC

   And while we want to know when we receive messages having something
   flicker in the echo area every time someone's status changes is
   just waaaaay too chatty.

   #+BEGIN_SRC emacs-lisp
     (setq jabber-alert-presence-hooks nil)
   #+END_SRC

   A convenience binding for firing up all the jabber connections
   would be handy.

   #+BEGIN_SRC emacs-lisp
     (global-set-key [f6] 'jabber-connect-all)
   #+END_SRC
   
** irc, currently with erc

   Internet Relay Chat is a great way of talking to lots of
   interesting people in what feels a bit like a pub.

*** Tracking
    
    We want to highlight pals and diminish fools, but leave out when
    people leave and join.
    
    #+BEGIN_SRC emacs-lisp
      (erc-track-mode t)
      (setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"
                                       "324" "329" "332" "333" "353" "477"))
      
      ;; don't show any of this
      (setq erc-hide-list '("JOIN" "PART" "QUIT" "NICK"))
    #+END_SRC

*** Scroll to Bottom
    
    Typing happens at the bottom and we want as much history as
    possible to be visible.

    #+BEGIN_SRC emacs-lisp
      (add-hook 'erc-mode-hook 'erc-add-scroll-to-bottom)
    #+END_SRC

*** Spell Checking
    
    And spell checking is good.

    #+BEGIN_SRC emacs-lisp
      (erc-spelling-mode 1)
    #+END_SRC

    These are all of the channels I join by default. Some big data ones
    like #cascalog and #hadoop. Some clojure ones such as
    #liberator, #clojure, #clojurewerkz, #lndclj. Some devopsy ones
    like #jclouds and #pallet. Some communities that do good
    like #ukodi and ##cleanweb. And ones for Mastodon C like #kixi.
    
    #+BEGIN_SRC emacs-lisp
      (setq erc-autojoin-channels-alist '(("freenode.net" "##cleanweb" "#kixi" "#theodi" "#ldnclj")))
    #+END_SRC

*** Credentials
    
    My credentials are in mellon.el of course. This is where I set
    erc-user-full-name, erc-email-user-id, erc-nick and erc-password. I
    also keep my erc-pals and erc-fools in here. Try to guess which
    list you might be in. :-D
    
*** Switch to irc

    What we want to do is switch to irc if we've got something
    running. If not, then start erc up.

    #+BEGIN_SRC emacs-lisp
      (defun switch-to-irc ()
        (interactive)
        (let ((buffers (and (fboundp 'erc-buffer-list)
                            (erc-buffer-list))))
          (if buffers
              (switch-to-buffer (car buffers))
            (erc :server "irc.freenode.net"))))
    #+END_SRC

*** Logging

    Handy to save the irc logs so we have a way of finding interesting
    things again after hearing about them on irc.
    
    #+BEGIN_SRC emacs-lisp
      (setq erc-log-channels-directory (concat user-emacs-directory "erc/logs/"))
      (setq erc-save-buffer-on-part t)
    #+END_SRC
    
** Hailing Frequencies

   It is good that jabber and erc die when I put the computer to
   sleep. What I'd like to be able to do is bring them all back up
   with a simple Vulcan grip.

   #+BEGIN_SRC emacs-lisp
     (defun open-a-channel ()
       (interactive)
       (jabber-connect-all)
       (swtich-to-irc))
     (global-set-key [C-M-s-f6] 'open-a-channel)
   #+END_SRC
   
* Programming Modes
** prog-mode

   prog-mode and the prog-mode-hook are at the basis of most of the
   programming modes in emacs. If we want something set up for
   everything we should do it here.
   
*** Parentheses
**** Show Them

     We really want to see those parentheses. 
     
     #+BEGIN_SRC emacs-lisp
       (show-paren-mode +1)
     #+END_SRC

**** paredit-mode

     Should I move over to smartparens? Can anyone tell me what is so
     much better about it?

     paredit-mode is a strange one. When you first use it, you will
     hate it. You'll hate the way it won't let you do the things
     you *think* you want to do. Once you get used to it though you
     wonder how you ever did any programming without it.

     #+BEGIN_SRC emacs-lisp
       (maybe-install-and-require 'paredit)
       (diminish 'paredit-mode "()")
       (add-hook 'prog-mode-hook 'paredit-mode)
     #+END_SRC

*** rainbow-delimiters

    Make those delimiters glow with wacky colors so we can see what is
    going on.

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'rainbow-delimiters)
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    #+END_SRC

*** rainbow mode

    If we have a color literal it is really nice to have an idea of
    what it is going to look like. This is *really* useful in things
    like editing CSS files with hex color codes.

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'rainbow-mode)
      (add-hook 'prog-mode-hook 'rainbow-mode)
      (diminish 'rainbow-mode)
    #+END_SRC

*** highlight-symbol

    I like to see all of the places I'm using the same symbol. This is
    a great visual cue for those times where you've mistyped a variable
    for function name. It isn't quite flymake, but it is handy. It is
    good to see where something is used as well.

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'highlight-symbol)
      (add-hook 'prog-mode-hook 'highlight-symbol-mode)
    #+END_SRC
    
*** autocomplete

    Let's setup the basics of autocomplete for everything.

    #+BEGIN_SRC emacs-lisp
      (require 'auto-complete-config)
      (ac-config-default)
    #+END_SRC
    
*** yasnippet

    I had some lovely things in skeleton mode ages ago to write out
    boilerplate for C++ and to convert some awful, horrible 100
    parameter PLSQL functions I had to call. yasnippets seems to be
    the one that people are using now to do smaller things than what
    I was doing with skeleton. This is probably a good thing.

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'yasnippet)
    #+END_SRC

    We need a place to add our snippets for each mode as well. We'll
    put that in snippets.

    #+BEGIN_SRC emacs-lisp
      (setq yas/root-directory (concat user-emacs-directory "snippets"))
    #+END_SRC

    And we want to add yasnippets to all modes where we have snippets.

    #+BEGIN_SRC emacs-lisp
      (yas-global-mode 1)
    #+END_SRC
    
*** smartscan

    A suggestion from [[http://www.masteringemacs.org/articles/2011/01/14/effective-editing-movement/][Effective Editing]] in [[http://www.masteringemacs.org/][Mastering Emacs]]. 
    
    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'smartscan)
      (add-hook 'prog-mode-hook
                '(lambda () (smartscan-mode 1)))
    #+END_SRC
    
** lisp modes

   emacs-lisp and clojure are the two that really go in here for now,
   though in the future scheme and common lisp could be added.

*** lisp hooks

    These are the common lisp hooks we want shared across all lisp
    modes.

    #+BEGIN_SRC emacs-lisp
            (setq lisp-hooks (lambda ()
                               (eldoc-mode +1)
                               (diminish 'eldoc-mode)
                               (define-key paredit-mode-map
                                 (kbd "{") 'paredit-open-curly)
                               (define-key paredit-mode-map
                                 (kbd "}") 'paredit-close-curly)))
    #+END_SRC

*** emacs-lisp

**** lisp-mode-hook

     Let's add the lisp mode hook to the emacs-lisp-mode

     #+BEGIN_SRC emacs-lisp
       (add-hook 'emacs-lisp-mode-hook lisp-hooks)
     #+END_SRC

**** Pop Up Help in Emacs Lisp

     Thx again to [[http://twitter.com/krisajenkins][Kris Jenkins]] and his [[http://blog.jenkster.com/2013/12/popup-help-in-emacs-lisp.html][blog post]] I've got even yet
     more help with emacs-lisp functions in a popup just like in ac
     stuff in clojure modes. Thanks to [[http://twitter.com/sanityinc][Steve Purcell]] we have an
     improved version that gets faces and vars in addition to
     functions, so in some ways it is even a bit better than what is
     available in cider/clojure-mode (from my understanding anyway). 

     #+BEGIN_SRC emacs-lisp
       (require 'popup)
       
       (defun describe-thing-in-popup ()
         (interactive)
         (let* ((thing (symbol-at-point))
                (help-xref-following t)
                (description (with-temp-buffer
                               (help-mode)
                               (help-xref-interned thing)
                               (buffer-string))))
           (popup-tip description
                      :point (point)
                      :around t
                      :height 30
                      :scroll-bar t
                      :margin t)))
     #+END_SRC

***** The usual help keybinding

      Let's use C-c C-d for describing functions at point as this is
      the binding in cider/nrepl that I'm used to. We'll probably do
      this in other modes as well so we'll make it a local keybinding
      and then it will more or less [[http://en.wikipedia.org/wiki/DWIM][dwim]].

      #+BEGIN_SRC emacs-lisp
        (add-hook 'emacs-lisp-mode-hook
                  (lambda () (local-set-key (kbd "C-c C-d") 'describe-thing-in-popup)))
      #+END_SRC

*** clojure

    I do *love* coding in clojure. The tool chain has been evolving
    quite a bit over the last few years.

    Everything has gone from being built only with maven to maven
    being just for core and everything else being done with [[http://leiningen.org/][Leiningen]].

    On the emacs side we've gone from the swank and slime, to nrepl
    and nrepl.el, to now we have nrepl and cider.el. Trying to move to
    cider.el is what caused me to declare .emacs.d bankruptcy this
    time and restructure everything.

    Most of the clojure emacs goodness if available in the github
    repo called [[https://github.com/clojure-emacs][clojure-emacs]].

**** cider

***** install

      You can get most of the clojure support by just elpa installing
      cider.

      #+BEGIN_SRC emacs-lisp
        (maybe-install-and-require 'cider)
      #+END_SRC
      
***** clojure-test-mode
      
      Adding clojure-test-mode is a good idea too. Lots of things out
      there using the built in clojure.test.

      #+BEGIN_SRC emacs-lisp
        (maybe-install-and-require 'clojure-test-mode)     
      #+END_SRC

***** clojure-mode-hook
      
      We'll also want to get our lisp-hooks into our clojurey
      goodness. It would be a shame to not have it here.

      #+BEGIN_SRC emacs-lisp
        (add-hook 'clojure-mode-hook lisp-hooks)
      #+END_SRC

***** cider-mode-hooks
      
      There are more things that we'll want that are specific to cider
      mode and the cider interaction buffer.

      #+BEGIN_SRC emacs-lisp
        (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
        (add-hook 'cider-interaction-mode-hook 'cider-turn-on-eldoc-mode)
      #+END_SRC

***** Save cider history
      
      We also want to save the history of our interactions. There might
      be gold there.

      #+BEGIN_SRC emacs-lisp
        (setq cider-history-file (concat user-emacs-directory "cider-history"))
      #+END_SRC

***** subword-mode

      I also want to be able to navigate to the "-" characters in words.

      #+BEGIN_SRC emacs-lisp
        (add-hook 'cider-mode-hook 'subword-mode)
      #+END_SRC

***** autocomplete

      Popup autocomplete always looks cool and it helps sometimes too.

      #+BEGIN_SRC emacs-lisp
        (maybe-install-and-require 'ac-nrepl)
        (add-hook 'cider-repl-mode-hook 'ac-nrepl-setup)
        (add-hook 'cider-mode-hook 'ac-nrepl-setup)
        (eval-after-load "auto-complete"
          '(add-to-list 'ac-modes 'cider-repl-mode))
        
        (defun set-auto-complete-as-completion-at-point-function ()
          (setq completion-at-point-functions '(auto-complete)))
        (add-hook 'auto-complete-mode-hook 'set-auto-complete-as-completion-at-point-function)
        
        (add-hook 'cider-repl-mode-hook 'set-auto-complete-as-completion-at-point-function)
        (add-hook 'cider-mode-hook 'set-auto-complete-as-completion-at-point-function)
        
        (define-key cider-mode-map (kbd "C-c C-d") 'ac-nrepl-popup-doc)
      #+END_SRC
      
**** helm and clojure

     Kris Jenkins has a great helm-clojure-headlines that I'd like to
     bind to s-h when in clojure-mode.

     #+BEGIN_SRC emacs-lisp
       (defun helm-clojure-headlines ()
         "Display headlines for the current Clojure file."
         (interactive)
         (helm :sources '(((name . "Clojure Headlines")
                           (volatile)
                           (headline "^[;(]")))))
       
       (add-hook 'clojure-mode-hook
                 (lambda () (local-set-key (kbd "s-h") 'helm-clojure-headlines)))
     #+END_SRC

**** Clojure Cheat Sheet

     It was this helm addon from Kris Jenkins that made me start to
     look at helm. And having the clojure cheat sheet to hand is
     useful.

     I like binding cheatsheets to s-f9.

     #+BEGIN_SRC emacs-lisp
       (maybe-install-and-require 'clojure-cheatsheet)
       (add-hook 'clojure-mode-hook
                 (lambda () (local-set-key [s-f1] 'clojure-cheatsheet)))
     #+END_SRC
     
** python
   
*** GNU Emacs IPython Notebook

    The [[http://ipython.org/][IPython Notebook]] is *almost* as cool as org-mode literate
    programming. There is an Emacs mode you can use with it.
    
    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'ein)
    #+END_SRC

** javascript

   According to [[http://twitter.com/sw1nn][Neale Swinnerton]] js2-mode is the way to go.

   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'js2-mode)
     (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
   #+END_SRC

   And we can hook it in to run node.js shell scripts as well.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'interpreter-mode-alist '("node" . js2-mode))
   #+END_SRC
   
** pastebins

   gist, pastebin, refheap. All good ways of sharing snippets of code
   with people on irc or similar.

*** gist

    As you probably already have a github account, having gist as a
    way of sharing code snippets is a good idea.

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'gist)
    #+END_SRC
    
*** refheap

    I like [[http://refheap.com][refheap]] and Anthony Grimes seems like a nice guy. And it
    is built in clojure.

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'refheap)
    #+END_SRC

* Text Modes
** Text Mode Basics

   If we are in a text mode we want flyspell and auto-fill-mode.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'text-mode-hook
               (lambda ()
                       (flyspell-mode 1)
                       (diminish 'flyspell-mode)
                       (auto-fill-mode 1)
                       (diminish 'auto-fill-function)))
   #+END_SRC

** deft and org

*** deft

    deft-mode is a Notational Velocity like note taker. I really like
    it for finding notes that are already there. The way it searches
    for notes reminds me quite a lot of helm, so I'm wondering if I
    might replace this with helm and org-mode. That would be one to ask
    Kris Jenkins.

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'deft)
    #+END_SRC

    We want to keep our deft notes in ~/org/deft

    #+BEGIN_SRC emacs-lisp
      (setq deft-directory "~/org/deft/")
    #+END_SRC

    We want the notes to be in org-mode format

    #+BEGIN_SRC emacs-lisp
      (setq deft-extension "org")
      (setq deft-text-mode 'org-mode)
    #+END_SRC

    And we want f5 to be the key to get us to the top level search
    list. The f5s are where we put our text mode things.

    #+BEGIN_SRC emacs-lisp
      (global-set-key [f5] 'deft)
    #+END_SRC

*** org-mode

    I also use org-mode on its own and would like to use it more. I
    used to be a complete planner-mode addict. I've never really
    gotten into org-mode in the same way. Having a way to sync to
    trello and link to my email, magit and everything else keeps
    making me want to try though.

**** fontify

     This is all written in org-mode. It would be good if the source
     code examples were fonitfies according to their major mode.

     #+BEGIN_SRC emacs-lisp
       (setq org-src-fontify-natively t)
     #+END_SRC

**** spelling

     On a Mac we need to tell org-mode to use aspell, which we
     installed using homebrew.

     #+BEGIN_SRC emacs-lisp
       (setq ispell-program-name (executable-find "aspell"))
     #+END_SRC

**** org-headlines

     Just like in [[helm and clojure]] we'd like to be able to look at
     the headlines in org-mode too.
     
     #+BEGIN_SRC emacs-lisp
       (add-hook 'org-mode-hook
                 (lambda () (local-set-key (kbd "s-h") 'helm-org-headlines)))
     #+END_SRC

**** org-cheatsheet

     Having cheatsheets around is handy. Especially for sprawling
     modes like org-mode.

     #+BEGIN_SRC emacs-lisp
       (maybe-install-and-require 'helm-orgcard)
       (add-hook 'org-mode-hook
                        (lambda () (local-set-key [s-f1] 'helm-orgcard)))
     #+END_SRC

**** org-feed

     I really quite liked google as a blog reader. Before that I used
     to use Bloglines, which I liked more. Now I find that I can use
     emacs and org-mode to read RSS and atom.

     #+BEGIN_SRC emacs-lisp
       (setq org-feed-retrieve-method 'curl)
     #+END_SRC

***** The Blog Roll

      And this is my incomplete and silly blog roll. There are many
      more things that I should read and I read very few on the ones
      in here regularly. If I know you and you are in here, you
      should really tweet about your new blog posts more.

      If I'm honest, really this is how I keep up with various
      webcomics.

      #+BEGIN_SRC emacs-lisp
        (load-if-exists (concat user-emacs-directory "local/blog-roll.el"))
      #+END_SRC
 
**** ox-reveal

     [[https://github.com/hakimel/reveal.js/][reveal.js]] is a great way of making pretty presentations,
     especially if you have a fair bit of code. Kris Jenkins suggested
     that [[https://github.com/yjwen/org-reveal][ox-reveal]] would be a great way of generating the slides for
     reveal.js.

     #+BEGIN_SRC emacs-lisp
       (maybe-install-and-require 'ox-reveal)
     #+END_SRC

     As a part of the installation we need to point at where we have
     our copy of reveal.js. It uses a lot of disk space, but put it
     into a sub directory for each presentation. Then you can serve it
     up using http-server in node or a python webserver locally and
     then things like speaker notes will work. Full screen in Lion is
     still b0rken. Yet another reason to go over to linux.

     #+BEGIN_SRC emacs-lisp
       (setq org-reveal-root "reveal.js-2.5.0/")
     #+END_SRC
     
** html, sgml, xml

*** tagedit

    This gives us paredit like editing for html

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'tagedit)
      (eval-after-load "sgml-mode"
        '(progn
           (require 'tagedit)
           (tagedit-add-paredit-like-keybindings)
           (add-hook 'html-mode-hook (lambda () (tagedit-mode 1)))))
    #+END_SRC

    I quite like the sound of the experimental editing stuff. Let's
    put it in and see if it helps or destroys our code.

    #+BEGIN_SRC emacs-lisp
      (tagedit-add-experimental-features)
    #+END_SRC
    
*** css

    I should probably look at adding more sugar to this.
    
**** paredit
     
     I *always* want my parens to match (except in text modes).

     #+BEGIN_SRC emacs-lisp
       (add-hook 'css-mode-hook 'paredit-mode)
     #+END_SRC
     
**** rainbow mode

     And I want to see the colours I'm using.
     
     #+BEGIN_SRC emacs-lisp
       (add-hook 'css-mode-hook 'rainbow-mode)     
     #+END_SRC

**** eldoc

     And who doesn't want eldoc tips when they are editing things. 

     #+BEGIN_SRC emacs-lisp
       (maybe-install-and-require 'css-eldoc)
     #+END_SRC

**** helm support

     And to be able to navigate around our selectors using helm. And
     then we want to make it a headline key just like in our other
     modes. 

     #+BEGIN_SRC emacs-lisp
       (maybe-install-and-require 'helm-css-scss)
       (add-hook 'css-mode-hook
                 (lambda () (local-set-key (kbd "s-h") 'helm-css-scss)))
     #+END_SRC

    We'll need elnode. Who needs all this silly node.js or python
    stuff to start a webserver.

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'elnode)
    #+END_SRC

    This is a handy helper for when you need a webserver _right here_
    and want to browse the site you just started.
    
    #+BEGIN_SRC emacs-lisp
      (defun web-server-here (port)
        (interactive "sServer Port: ")
        (elnode-make-webserver (file-name-directory (buffer-file-name)) port)
        (browse-url (concat "http://localhost:" port)))
    #+END_SRC

    When you want to list the webservers that  are running (say to
    kill on of them. Just M-x list-elnode-servers
    #+END   
** markdown

   I love org-mode, but lots of other systems use markdown, github
   wiki pages being a very good example.

   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'markdown-mode)
   #+END_SRC

*** helm markdown headlines

    I want super-h to work and give me headlines just like in
    org-mode. I feel this could perhaps be a bit better, but this will
    do for now.
    
    #+BEGIN_SRC emacs-lisp
      (defun helm-markdown-headlines ()
        "Display headlines for the current Clojure file."
        (interactive)
        (helm :sources '(((name . "Markdown Headlines")
                          (volatile)
                          (headline "^[#]")))))
      
      (add-hook 'markdown-mode-hook
                (lambda () (local-set-key (kbd "s-h") 'helm-markdown-headlines)))
    #+END_SRC
* Multimedia

** emms to play music

   I've used emms before. I like the way you just need an underlying
   media player and emacs is just a thin shell over that, with some
   files to help with play lists. We're using mpg321 from homebrew on
   a mac to play the files.

   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'emms)
     (require 'emms-setup)
     (emms-standard)
     (emms-default-players)
     (setq emms-source-file-default-directory "/Users/bld/Music/")
   #+END_SRC

*** emms keybindings

    f7-f9 are the previous, play/pause and next keys. It is quite
    handy having them bound to do that for emms.

    And a control-meta to start everything off.

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-M-s-<f8>") 'emms-playlist-mode-go)
      (global-set-key (kbd "<f8>") 'emms-pause)
      (global-set-key (kbd "<f9>") 'emms-next)
      (global-set-key (kbd "<f7>") 'emms-previous)
      (global-set-key (kbd "s-<f8>") 'emms-stop)
    #+END_SRC
    
*** Turn off emms-mode-line

    There really is enough in that modeline already. We don't need to
    add more.

    #+BEGIN_SRC emacs-lisp
      (require 'emms-mode-line)
      (emms-mode-line 0)
    #+END_SRC
    
* Local Config
** custom.el

   custom.el is great for configuring things through that "gui" in
   emacs, but it is a real pain when it drops junk in your [[../init.el][init.el]] and
   messes up your pretty config and git history and is stuff that you
   don't want to leak out on to github. You can change the location of
   this file though and I like to do this.

   #+BEGIN_SRC emacs-lisp
     (setq custom-file "~/.emacs.d/local/custom.el")
     (load-if-exists custom-file)
   #+END_SRC
* Utilities and General Keybindings
  
** join-line

   A quick way of getting lines back together.
   
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "s-<return>") 'join-line)
   #+END_SRC
   
   
* Finishing

** passwords and encrypted things

   It is good to store your passwords and things in an encrypted
   file. I call mine mellon, because you can only read it if you are
   my friend and have the passphrase.

   This does mean that every time you use it you have to give the
   passphrase, but it does mean that you can keep all your passwords
   for things like erc and stuff in a file reasonably safely (though
   it will be in memory when emacs is running, so it isn't completely
   secure).

   #+BEGIN_SRC emacs-lisp
     (load-if-exists (concat user-emacs-directory "local/mellon.el.gpg"))
   #+END_SRC
   
** Finis

   I should really come up with better exhortations than this. The
   stuff that Sam Aaron has in emacs-live I actually find quite
   inspirational. cider.el has similar, though more specifically
   clojurian things to say that I quite like as well.

   However, I've always expected that any sufficiently advanced lisp
   system has probably gained sentience. I think Emacs probably
   qualifies for that.

   Therefore, let's sign off as so...

   #+BEGIN_SRC emacs-lisp
     (message "Cogito ergo sum.")
   #+END_SRC

* Todo [0%]
- [ ] add better python modes
- [ ] find out why jig reset key binding isn't working
